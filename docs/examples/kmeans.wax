;; kmeans.wax
;; implementation of naive kmeans algorithm
;; in arbitrary dimensions (2d, 3d, ...)
;; with "random partition" initialization
;; https://en.wikipedia.org/wiki/K-means_clustering

(@include math)

;; dimensionality: 2, 3 etc.
(@define DIM 2)


;; datastructure for a point
(struct pt
	(let pos (vec @DIM float)) ; coordinate of point
	(let cluster int) 
		; ^ for data points, this is cluster ID
		; for cluster centers, this is number of points
		; in the cluster
)

;; square distance between two points
(func dist_sq 
	(param a (vec @DIM float)) 
	(param b (vec @DIM float))
	(result float)
	
	(let d float 0)
	(for i 0 (< i @DIM) 1 (do
		(set d (+ d
			(call pow (- (get a i) (get b i)) 2)
		))
	))
	(return d)
)

;; free allocated data in an array of points
(func destroy_pts (param pts (arr (struct pt)))
	(for i 0 (< i (# pts)) 1 (do
		(free (get pts i pos))
		(free (get pts i))
	))
	(free pts)
)

;; recompute cluster centers from the points in the cluster
(func recomp_centers 
	(param centers (arr (struct pt)))
	(param pts     (arr (struct pt)))
	
	(let n_clusters int (# centers))
	
	(for i 0 (< i n_clusters) 1 (do
		(for j 0 (< j @DIM) 1 (do
			(set (get centers i pos) j 0.0)
		))
		(set (get centers i) cluster 0)
	))
	(for i 0 (< i (# pts)) 1 (do
		(let c int (get pts i cluster))
		
		(for j 0 (< j @DIM) 1 (do
			(set (get centers c pos) j 
				(+ (get centers c pos j) (get pts i pos j))
			)
		))
		(set (get centers c) cluster
			(+ (get centers c cluster) 1)
		)
	))
	(for i 0 (< i n_clusters) 1 (do
		(if (get centers i cluster) (then
			(for j 0 (< j @DIM) 1 (do
				(set (get centers i pos) j 
					(/ (get centers i pos j) (get centers i cluster))
				)
			))
		))
	))
)

;; run kmeans algirthm
(func kmeans 
	(param pts (arr (struct pt))) 
	(param n_clusters int)
	(param max_iter int)
	
	; assign each point to a random cluster
	(for i 0 (< i (# pts)) 1 (do
		(set (get pts i) cluster 
			(cast (* (call random) n_clusters) int)
		)
	))
	
	; initialize the cluster centers
	(let centers (arr (struct pt)) (alloc (arr (struct pt))))
	
	(for i 0 (< i n_clusters) 1 (do
		(let p (struct pt) (alloc (struct pt)))
		(set p pos (alloc (vec @DIM float)))
		(insert centers (# centers) p)
	))
	
	; run kmeans iteration
	(for iter 0 (< iter max_iter) 1 (do
		
		(call recomp_centers centers pts)
		
		(let diff int 0) ; anything changed? nothing->done
		
		; find closest cluster center to attach the point
		(for i 0 (< i (# pts)) 1 (do
			(let dstmin float INFINITY)
			(let argmin int 0) 
			(for j 0 (< j n_clusters) 1 (do
				(let d float (call dist_sq
					(get pts     i pos)
					(get centers j pos)
				))
				(if (< d dstmin) (then
					(set dstmin d)
					(set argmin j)
				))
			
			))
			(if (<> argmin (get pts i cluster)) (then
				(set diff 1)
			))
			(set (get pts i) cluster argmin)
		))
		
		(if (! diff) (then ; no change, done!
			(break)
		))
	))
	
	(call destroy_pts centers)
	
)


;; end of kmeans algorithm
;;=================================================================
;; start of testing kmeans



;; parameters for testing
(@define RANGE   50  ) ; range of random coordinates
(@define RANGESQ 2500) ; range^2

;; plot result of kmeans via ASCII art
;; only the first two dimensions are plotted (x,y)
;; higher dimensions are ignored
(func plot2d (param pts (arr (struct pt)))
	(local pix 
		(vec @RANGESQ int) 
		(alloc (vec @RANGESQ int))
	)
	(for i 0 (< i (# pts)) 1 (do
		(let x int (get pts i pos 0))
		(let y int (get pts i pos 1))
		(set pix (+ (* y @RANGE) x) 
			(+ (get pts i cluster) 1)
		)
	))
	(local s str (alloc str))
	(for i 0 (< i @RANGESQ) 1 (do
		(if (! (% i @RANGE)) (then
			(<< s "\n")
		))
		(<< s (+ (get pix i) 32))
	))
	(print s)
)


;; generate a bunch of random points
;; run kmeans, and plot the output in terminal
(func main (result int)
	(let pts (arr (struct pt)) (alloc (arr (struct pt))))

	; populate points with random coordinates	
	(for i 0 (< i 200) 1 (do
		(let p (struct pt) (alloc (struct pt)))
		(set p pos (alloc (vec @DIM float)))
		
		(for j 0 (< j @DIM) 1 (do
			(set (get p pos) j (* (call random) @RANGE))
		))
		(insert pts (# pts) p)
		
	))
	
	(call kmeans pts 6 300)
	
	(call plot2d pts)
	
	(call destroy_pts pts)
	(return 0)
)
