;; Voronoi Relaxation
;; with animated SVG
;;
;; This demo contains 3 parts:
;; - Delaunay triangulation, a port of Paul Bourke's implementation
;;   (http://paulbourke.net/papers/triangulate/triangulate.c)
;;   This is the same as "examples/delaunay.wax", copy-pasted here because 
;;   wax Playground does not support (@include "...") yet 
;; - Voronoi diagram, computed by "flipping" the delaunay.
;;   (For a better big-O, Fortune's Sweep algorithm can be used instead,
;;   but since we already got the delaunay, plus it's easier, so... :)
;; - Lloyd's relaxation algorithm, which iteratively spreads out 
;;   the voronoi sites more and more evenly 
;;   (https://en.wikipedia.org/wiki/Lloyd%27s_algorithm)
;;
;; Note: when running in the wax Playground, it might take a second to
;;       compute all the frames, which might look like browser freezing

(@include math)

;; =========================================================================
;; PART I: Delaunay Triangulation
;; ported from Paul Bourke original C version:
;; http://paulbourke.net/papers/triangulate/triangulate.c
;; with original comments

(@define X 0)
(@define Y 1)
(@define FALSE 0)
(@define TRUE 1)
(@define P1 0)
(@define P2 1)
(@define P3 2)
(@define EPSILON 0.0000001)

;; Return TRUE if a point (xp,yp) is inside the circumcircle made up
;; of the points (x1,y1), (x2,y2), (x3,y3)
;; The circumcircle centre is returned in (xc,yc) and the radius r
;; NOTE: A point on the edge is inside the circumcircle
(func circumcircle (param xp float) (param yp float)
	(param x1 float) (param y1 float) (param x2 float) (param y2 float) (param x3 float) (param y3 float)
	(param xcycr (vec 3 float)) (result int)

	(let m1 float) (let m2 float)
	(let mx1 float) (let mx2 float)
	(let my1 float) (let my2 float)
	(let dx float) (let dy float) (let drsqr float)
	(let fabsy1y2 float (call fabs (- y1 y2)))
	(let fabsy2y3 float (call fabs (- y2 y3)))
	(let xc float)
	(let yc float)
	(let rsqr float)

	(if (&& (< fabsy1y2 @EPSILON) (< fabsy2y3 @EPSILON)) (then
		(return 0)
	))
	(if (< fabsy1y2 @EPSILON) (then
		(set m2 (- (/ (- x3 x2) (- y3 y2))))
		(set mx2 (/ (+ x2 x3) 2.0))
		(set my2 (/ (+ y2 y3) 2.0))
		(set xc (/ (+ x2 x1) 2.0))
		(set yc (+ (* m2 (- xc mx2)) my2))
	)(else (if (< fabsy2y3 @EPSILON) (then
		(set m1 (- (/ (- x2 x1) (- y2 y1))))
		(set mx1 (/ (+ x1 x2) 2.0))
		(set my1 (/ (+ y1 y2) 2.0))
		(set xc (/ (+ x3 x2) 2.0))
		(set yc (+ (* m1 (- xc mx1)) my1))
	)(else
		(set m1 (- (/ (- x2 x1) (- y2 y1))))
		(set m2 (- (/ (- x3 x2) (- y3 y2))))
		(set mx1 (/ (+ x1 x2) 2.0))
		(set mx2 (/ (+ x2 x3) 2.0))
		(set my1 (/ (+ y1 y2) 2.0))
		(set my2 (/ (+ y2 y3) 2.0))
		(set xc (/ (+ (* m1 mx1) (- (* m2 mx2)) my2 (- my1) ) (- m1 m2) ))
		(if (> fabsy1y2 fabsy2y3) (then
			(set yc (+ (* m1 (- xc mx1)) my1))
		)(else
			(set yc (+ (* m2 (- xc mx2)) my2))
		))
	))))
	(set dx (- x2 xc))
	(set dy (- y2 yc))
	(set rsqr (+ (* dx dx) (* dy dy)))
	(set dx (- xp xc))
	(set dy (- yp yc))
	(set drsqr (+ (* dx dx) (* dy dy)))

	(set xcycr @X xc)
	(set xcycr @Y yc)
	(set xcycr 2 rsqr)

	(return (<= (- drsqr rsqr) @EPSILON))
)

;; Triangulation subroutine
;; Takes as input vertices in array pxyz
;; Returned is a list of triangular faces
;; These triangles are arranged in a consistent clockwise order.
;; The vertex array must be sorted in increasing x values
(func delaunaytriangulate (param pxyz (arr (vec 2 float))) (result (arr (vec 3 int)))
	(let nv int (# pxyz))
	(let inside int)
	(let xp float) (let yp float)
	(let x1 float) (let y1 float)
	(let x2 float) (let y2 float)
	(let x3 float) (let y3 float)
	(let xmin float) (let xmax float)
	(let ymin float) (let ymax float)
	(let xmid float) (let ymid float)
	(let dx float) (let dy float) (let dmax float)

	(local xcycr (vec 3 float) (alloc (vec 3 float)))
	(local complete (arr int) (alloc (arr int)))

	(let v (arr (vec 3 int)) (alloc (arr (vec 3 int))))

	(if (< (# pxyz) 3) (then
		(return v)
	))

	;; Find the maximum and minimum vertex bounds.
	;; This is to allow calculation of the bounding triangle
	(set xmin (get pxyz 0 @X))
	(set ymin (get pxyz 0 @Y))
	(set xmax xmin)
	(set ymax ymin)
	(for i 1 (< i nv) 1 (do
		(if (< (get pxyz i @X) xmin) (then (set xmin (get pxyz i @X)) ))
		(if (> (get pxyz i @X) xmax) (then (set xmax (get pxyz i @X)) ))
		(if (< (get pxyz i @Y) ymin) (then (set ymin (get pxyz i @Y)) ))
		(if (> (get pxyz i @Y) ymax) (then (set ymax (get pxyz i @Y)) ))
	))

	(set dx (- xmax xmin))
	(set dy (- ymax ymin))
	(set dmax (? (> dx dy) dx dy))
	(set xmid (/ (+ xmax xmin) 2))
	(set ymid (/ (+ ymax ymin) 2))
	
	;; Set up the supertriangle
	;; This is a triangle which encompasses all the sample points.
	;; The supertriangle coordinates are added to the end of the
	;; vertex list. The supertriangle is the first triangle in
	;; the triangle list.

	(insert pxyz (# pxyz) (alloc (vec 2 float) 
		(- xmid (* 2.0 dmax))
		(- ymid dmax)
	))
	(insert pxyz (# pxyz) (alloc (vec 2 float)
		xmid
		(+ ymid (* 2.0 dmax))
	))
	(insert pxyz (# pxyz) (alloc (vec 2 float)
		(+ xmid (* 2.0 dmax))
		(- ymid dmax)
	))
	(insert v 0 (alloc (vec 3 int)
		nv
		(+ nv 1)
		(+ nv 2)
	))

	(insert complete 0 @FALSE)
	
	;; Include each point one at a time into the existing mesh
	(for i 0 (< i nv) 1 (do
		(set xp (get pxyz i @X))
		(set yp (get pxyz i @Y))
		
		(local edges (arr (vec 2 int)) (alloc (arr (vec 2 int))))

		;; Set up the edge buffer.
		;; If the point (xp,yp) lies inside the circumcircle then the
		;; three edges of that triangle are added to the edge buffer
		;; and that triangle is removed.

		(for j (- (# v) 1) (>= j 0) -1 (do
			(if (! (get complete j)) (then
				(set x1 (get pxyz (get v j @P1) @X))
				(set y1 (get pxyz (get v j @P1) @Y))
				(set x2 (get pxyz (get v j @P2) @X))
				(set y2 (get pxyz (get v j @P2) @Y))
				(set x3 (get pxyz (get v j @P3) @X))
				(set y3 (get pxyz (get v j @P3) @Y))
				(set inside (call circumcircle xp yp x1 y1 x2 y2 x3 y3 xcycr))

				(let xc float (get xcycr @X))
				(let r float (get xcycr 2))
				(if (&& (< xc xp) (> (* (- xp xc) (- xp xc)) r) ) (then
					(set complete j @TRUE)
				))
				(if inside (then
					(insert edges (# edges) (alloc (vec 2 int) (get v j @P1) (get v j @P2)))
					(insert edges (# edges) (alloc (vec 2 int) (get v j @P2) (get v j @P3)))
					(insert edges (# edges) (alloc (vec 2 int) (get v j @P3) (get v j @P1))) 
					(free (get v j))
					(remove v j 1)
					(remove complete j 1)
				))
			))
		))
		;; Tag multiple edges
		;; Note: if all triangles are specified anticlockwise then all
		;;       interior edges are opposite pointing in direction.
		(for j 0 (< j (- (# edges) 1)) 1 (do
			(for k (+ j 1) (< k (# edges)) 1 (do
				(if (&&
					(= (get edges j @P1) (get edges k @P2))
					(= (get edges j @P2) (get edges k @P1))
				) (then
					(set (get edges j) @P1 -1)
					(set (get edges j) @P2 -1)
					(set (get edges k) @P1 -1)
					(set (get edges k) @P2 -1)
				))
				;; Shouldn't need the following, see note above
				(if (&&
					(= (get edges j @P1) (get edges k @P1))
					(= (get edges j @P2) (get edges k @P2))
				) (then
					(set (get edges j) @P1 -1)
					(set (get edges j) @P2 -1)
					(set (get edges k) @P1 -1)
					(set (get edges k) @P2 -1)
				))
			))
		))
		
		;; Form new triangles for the current point
		;; Skipping over any tagged edges.
		;; All edges are arranged in clockwise order.
		(for j 0 (< j (# edges)) 1 (do
			(if (||
				(< (get edges j @P1) 0)
				(< (get edges j @P2) 0)
			) (then) (else
				(insert v (# v) (alloc (vec 3 int)
					(get edges j @P1)
					(get edges j @P2)
					i
				))
				(insert complete (# complete) @FALSE)
			))
			(free (get edges j))
		))
	))
	;; Remove triangles with supertriangle vertices
	;; These are triangles which have a vertex number greater than nv
	(for i (- (# v) 1) (>= i 0) -1 (do
		(if (||
			(>= (get v i @P1) nv)
			(>= (get v i @P2) nv)
			(>= (get v i @p3) nv)
		)(then
			(free (get v i))
			(remove v i 1)
		))
	))
	(free (get pxyz (- (# pxyz) 1) ))
	(free (get pxyz (- (# pxyz) 2) ))
	(free (get pxyz (- (# pxyz) 3) ))
	(remove pxyz (- (# pxyz) 3) 3)

	(return v)
)


(func comparex (param v1 (vec 2 float)) (param v2 (vec 2 float)) (result int)
	(if (< (get v1 @X) (get v2 @X)) (then
		(return -1)
	)(else (if (> (get v1 @X) (get v2 @X)) (then
		(return 1)
	))))
	(return 0)
)

;; =========================================================================
;; PART II: Voronoi from Delaunay
;; A simple algorithm:
;; - for every triangle in the triangulation, find its circumcenter 
;; - for every site who is a vertex of the triangle, insert the circumcenter 
;;   into its list of circumcenters, while maintaining the sorted order of the list
;;   by angles (clockwise)
;; - in the end, each list of circumcenters is a convex polygon, 
;;   a.k.a. "region"/"cell" of the site.
;; LIMITATION: No special handling of sites near the outer rim of the diagram -- i.e.
;;             No clipping by a box, etc. 
;;             However, as this demo shows, clipping effect can be simulated
;;             by "fencing" around the border with arrays of equidistant points

;; datastructure for a site
(struct site
  (let x float)
  (let y float)
	(let angles (arr float)) ; angles of associated circumcenters, to keep them sorted
	(let cell (arr (vec 2 float)))
)

;; sort points by x coordinate, 
;; while applying the same permuatation to another array 
;; (e.g. mask/indices/metadata for the points)
(func sortbyxf
	(param A (arr (vec 2 float))) 
	(param inds (arr int)) 
	(param lo int) (param hi int)

	(if (>= lo hi) (then
		(return)
	))
	(let pivot (vec 2 float) (get A lo))
	(let left  int lo)
	(let right int hi)
	(while (<= left right) (do
		(while (< (call comparex (get A left) pivot) 0) (do
			(set left (+ left 1))
		))
		(while (> (call comparex (get A right) pivot) 0) (do
			(set right (- right 1))
		))
		(if (<= left right) (then
			(let tmp (vec 2 float) (get A left))
			(set A left (get A right))
			(set A right tmp)

			(let tmp2 int (get inds left))
			(set inds left (get inds right))
			(set inds right tmp2)

			(set left  (+ left 1))
			(set right (- right 1))
		))
	))
	(call sortbyxf A inds lo right)
	(call sortbyxf A inds left hi)
)

;; add a vertex to a site's cell,
;; keeping sorted order by angles
(func siteaddvertex (param st (struct site)) (param x float) (param y float)
  (let ang float (call atan2 
		(- y (get st y))
		(- x (get st x))
	))
	(let xy (vec 2 float) (alloc (vec 2 float) x y))
  (let n int (# (get st cell)))

  (for i 0 (< i n) 1 (do
    (if (< ang (get st angles i)) (then
      (insert (get st cell) i xy)
      (insert (get st angles) i ang)
      (return)
    ))
  ))
	(insert (get st cell) n xy)
	(insert (get st angles) n ang)
)

;; is point in convex polygon?
;; this is to exclude some of the "unbounded" cells around the borders, where the site
;; appears to be outside of the bounded portion
;;     :\
;;   # : |
;;     :/
(func ptinconvex (param x float) (param y float) (param poly (arr (vec 2 float))) (result int)
	(for i 0 (< i (# poly)) 1 (do
		(let x0 float (get poly i 0))
		(let y0 float (get poly i 1))
		(let x1 float (get poly (% (+ i 1) (# poly)) 0))
		(let y1 float (get poly (% (+ i 1) (# poly)) 1))
		(let side float (-
			(* (- x x0) (- y1 y0)) (* (- x1 x0) (- y y0))
		))
		(if (> side 0) (then
			(return 0)
		))
	))
	(return 1)
)

;; exclude a cell if it doesn't have enough points to form a polygon, 
;; or if its site is outside of the bounded cell
;; this happens around the borders, see above
(func prunecell (param st (struct site))
	(let n int (# (get st cell)))
	(if (||
		(< n 3) 
		(! (call ptinconvex (get st x) (get st y) (get st cell)))
	)(then
		(for i 0 (< i n) 1 (do
			(free (get st cell i))
		))
		(remove (get st cell) 0 n)
	))
)

;; make voronoi diagram from delaunay triangles
(func makevoronoi (param pxyz (arr (vec 2 float))) (param triangles (arr (vec 3 int))) 
	(result (arr (struct site)))

  (let sites (arr (struct site)) (alloc (arr (struct site))))
	(local circ (vec 3 float) (alloc (vec 3 float)))

  (for i 0 (< i (# pxyz)) 1 (do
    (let st (struct site) (alloc (struct site)))
    (set st x (get pxyz i 0))
    (set st y (get pxyz i 1))
		(set st angles (alloc (arr float)))
		(set st cell (alloc (arr (vec 2 float))))
    (insert sites (# sites) st)
  ))
  (for i 0 (< i (# triangles)) 1 (do
    (let p0 int (get triangles i 0))
    (let p1 int (get triangles i 1))
    (let p2 int (get triangles i 2))
		
		(call circumcircle 0 0
			(get pxyz p0 0) (get pxyz p0 1)
			(get pxyz p1 0) (get pxyz p1 1)
			(get pxyz p2 0) (get pxyz p2 1)
			circ
		)
    (call siteaddvertex (get sites p0) (get circ 0) (get circ 1))
    (call siteaddvertex (get sites p1) (get circ 0) (get circ 1))
    (call siteaddvertex (get sites p2) (get circ 0) (get circ 1))
  ))
	(for i 0 (< i (# sites)) 1 (do
		(call prunecell (get sites i))
	))
  (return sites)
)

;; free memory for a list of sites
(func freesites (param sites (arr (struct site)))
	(for i 0 (< i (# sites)) 1 (do
		(free (get sites i angles))
		(for j 0 (< j (# (get sites i cell))) 1 (do
			(free (get sites i cell j))
		))
		(free (get sites i cell))
		(free (get sites i))
	))
	(free sites)
)

;; =========================================================================
;; PART III: Lloyd's Relaxation
;; https://en.wikipedia.org/wiki/Lloyd%27s_algorithm
;; A simple algrithm:
;; - Find voronoi
;; - Move site to centroid of each cell
;; - Repeat


;; find centroid of a convex shape
;; reference: https://bell0bytes.eu/centroid-convex/
(func convexcentroid (param poly (arr (vec 2 float))) (param ctrd (vec 2 float))
	(let n int (# poly))
	(let det float 0)
	(let j int 0)
	(let cx float 0)
	(let cy float 0)
	(for i 0 (< i n) 1 (do
		(set j (% (+ i 1) n))
		(let x0 float (get poly i 0))
		(let y0 float (get poly i 1))
		(let x1 float (get poly j 0))
		(let y1 float (get poly j 1))

		(let d float (- (* x0 y1) (* x1 y0)))
		(set det (+ det d))
		(set cx (+ cx (* d (+ x0 x1))))
		(set cy (+ cy (* d (+ y0 y1))))
	))
	(set cx (/ cx (* 3 det) ))
	(set cy (/ cy (* 3 det) ))
	(set ctrd 0 cx)
	(set ctrd 1 cy)
)

;; apply lloyd's relaxation for 1 iteration
;; param fixedf: a mask indicating if a point is fixed, hence not to be moved
;; modifies: the original list of points
;; returns: a voronoi diagram, as a list of sites. (you need to free these after use)
(func lloydrelax (param pxyz (arr (vec 2 float))) (param fixedf (arr int))
	(result (arr (struct site)))
	(call sortbyxf pxyz fixedf 0 (- (# pxyz) 1))
	
	(local triangles (arr (vec 3 int)) (call delaunaytriangulate pxyz))
	
	(let sites (arr (struct site)) (call makevoronoi pxyz triangles))
	(for i 0 (< i (# sites)) 1 (do
		(if (&& (! (get fixedf i)) (# (get sites i cell))) (then
			(call convexcentroid (get sites i cell) (get pxyz i))
		))
	))
	(for i 0 (< i (# triangles)) 1 (do
		(free (get triangles i))
	))
	(return sites)
)

;; =========================================================================
;; PART IV: Test and Render
;; Uses animated svg (fancy!)
;; https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate


; render a frame of the animated SVG
(func renderframe (param w int) (param h int)
	(param sites (arr (struct site))) 
	(param idx int) (param total int)
	(result str)

	(let s str (alloc str "<g opacity=\"0\"><animate attributeName=\"opacity\" dur=\"5\" repeatCount=\"indefinite\" calcMode=\"linear\" values=\"0;"))
	(for i 0 (< i total) 1 (do
		(<< s (? (= idx i) "1;" "0;"))
	))
	(<< s "0\"/>")

	(for i 0 (< i (# sites)) 1 (do
		(if (# (get sites i cell)) (then
			(<< s "<path d=\"")
			(for j 0 (< j (# (get sites i cell))) 1 (do
				(<< s (? j "L" "M"))
				(<< s (cast (get sites i cell j 0) str))
				(<< s ",")
				(<< s (cast (get sites i cell j 1) str))
				(<< s " ")
			))
			(<< s "z\" fill=\"none\" stroke=\"black\"/>")
		))

		(<< s "<circle cx=\"")
		(<< s (cast (get sites i x) str))
		(<< s "\" cy=\"")
		(<< s (cast (get sites i y) str))
		(<< s "\" r=\"2\" fill=\"black\" />")
	))
	(<< s "</g>")
	(return s)
)

;; test the whole thing
(func main (result int)
	;; list of points
	(local pxyz (arr (vec 2 float)) (alloc (arr (vec 2 float))))

	;; dimensions
	(let w int 400)
	(let h int 400)

	;; first generate a bunch of fixed points to act as the border
	;; just a simple circle
	(let numfixed int 50)
	(for i 0 (< i numfixed) 1 (do
		(let a float (/ (* i 6.2831853072) numfixed))
		(insert pxyz (# pxyz) (alloc (vec 2 float)
			(+ (/ w 2) (* (call cos a) (/ w 2)))
			(+ (/ w 2) (* (call sin a) (/ w 2)))
		))
	))

	;; generate a bunch of random points in the circle
	;; (with rejection sampling) 
	(for i 0 (< i 200) 1 (do
		(let x float (- (* (call random) w) (/ w 2)))
		(let y float (- (* (call random) h) (/ h 2)))
		(while (>= (+ (* x x) (* y y)) (* w w 0.25 0.8)) (do
			(set x (- (* (call random) w) (/ w 2)))
			(set y (- (* (call random) h) (/ h 2)))
		))
		(insert pxyz (# pxyz) (alloc (vec 2 float) 
			(+ x (/ w 2)) 
			(+ y (/ h 2))
		))
	))

	;; generate a mask for the fixed points so
	;; lloydrelax knows not to mess with them
	(local fixedfilter (arr int) (alloc (arr int)))
	(for i 0 (< i (# pxyz)) 1 (do
		(insert fixedfilter i (< i numfixed))
	))

	;; render the animated svg
  (local svg str (alloc str "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\""))
  (<< svg (cast w str))
  (<< svg "\" height=\"")
  (<< svg (cast h str))
  (<< svg "\">")
	
	(let maxiter int 10)
	(for iter 0 (< iter maxiter) 1 (do
		(let sites (arr (struct site)) (call lloydrelax pxyz fixedfilter))
		(local s str (call renderframe w h sites iter maxiter))
		(<< svg s)
		(call freesites sites)
	))
	(<< svg "</svg>")
	(print svg)

	;; clean up
	(for i 0 (< i (# pxyz)) 1 (do
		(free (get pxyz i))
	))

	(return 0)
)